1//  Какое будет выведено значение: let x = 5; alert( x++ ); ?

//  Выведено будет значение 5, потому что оператор постфиксного инкремента (++) увеличивает значение переменной после возврата её значения.


2// Чему равно такое выражение: [ ] + false - null + true ?

// Результат будет NaN (не число). Это происходит из-за того, что операции сложения (+) и вычитания (-) приводят операнды к числовому типу, но пустой массив при приведении к числу даст значение 0, а далее операции будут пытаться работать с числами и boolean, что приведет к NaN.

3
// Что выведет этот код: let y = 1; let x = y = 2; alert(x); ?



// Код выведет значение 2. Это происходит потому, что оператор присваивания = возвращает значение, которое было присвоено.

4// Чему равна сумма [ ] + 1 + 2?
// Результатом будет строка "12", потому что при сложении строки и числа, число преобразуется в строку и происходит конкатенация строк



5// Что выведет этот код: alert( "1"[0] )?

// Этот код выведет "1", потому что строка "1" обращается к своему первому символу, который и выводится


6// Чему равно 2 && 1 && null && 0 && undefined ?
// Результатом будет null, потому что оператор && возвращает первое ложное значение, которое в данном случае null.




7// Есть ли разница между выражениями? !!( a && b ) и (a && b)?
// Да, есть разница. !!(a && b) возвращает булево значение true, если и a и b являются true. В то время как (a && b) возвращает a, если a ложно, иначе возвращает b




8// Что выведет этот код: alert( null || 2 && 3 || 4 ); ?

// Код выведет 3. Это происходит потому, что оператор && имеет больший приоритет, чем ||, поэтому сначала выполнится выражение 2 && 3, которое даст 3, затем null || 3, что даст 3.



9// a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?

// Нет, это не правда. Массивы в JavaScript сравниваются по ссылке, а не по значению, поэтому a и b указывают на разные места в памяти, их содержимое одинаково, но сами они разные.



10// Что выведет этот код: alert( +"Infinity" ); ?
// Код выведет значение Infinity. Это происходит потому, что унарный плюс пытается преобразовать строку в число, и строка "Infinity" преобразуется в бесконечность




11// Верно ли сравнение: "Ёжик" > "яблоко"?

// Да, это верно. При сравнении строк используется лексикографическое сравнение, и в юникодной таблице символов "Ё" имеет большее значение, чем "я".

    

12// Чему равно 0 || "" || 2 || undefined || true || falsе ?
// Результатом будет 2. Это происходит потому, что оператор || возвращает первое истинное значение, которое в данном случае является 2.






